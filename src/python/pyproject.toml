# NOTE: pyproject.toml requires a up-to-date pip version (pip 23+)
[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=68.0", "wheel>=0.37.1"]

[project]
name = "phenix-apps"
dynamic = ["version"]  # see section below, [tool.setuptools.dynamic]
description = "phenix user apps, schedulers, and Scorch components"
readme = "README.md"
requires-python = ">=3.8,<4.0"
license = {file = "LICENSE"}
authors = [
    {name = "Sandia National Laboratories", email = "emulytics@sandia.gov"},
]
keywords = ["sceptre", "phenix", "phenix-apps", "minimega", "emulytics", "sandia"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "lxml~=4.9.2",
    "Mako~=1.1.3",
    "minimega",
    "python-box~=7.2.0",
    "elasticsearch~=8.12.0",
    "requests==2.31.0",
    "python-dateutil==2.8.2",
    "pyyaml~=6.0.2",
    "kafka-python~=2.2.13"
]

[project.scripts]
phenix-app-caldera = "phenix_apps.apps.caldera.caldera:main"
phenix-app-helics = "phenix_apps.apps.helics.helics:main"
phenix-app-ot-sim = "phenix_apps.apps.otsim.otsim:main"
phenix-app-protonuke = "phenix_apps.apps.protonuke.protonuke:main"
phenix-app-sceptre = "phenix_apps.apps.sceptre.sceptre:main"
phenix-app-wind-turbine = "phenix_apps.apps.wind_turbine.wind_turbine:main"
phenix-app-wireguard = "phenix_apps.apps.wireguard.wireguard:main"
phenix-scheduler-single-node = "phenix_apps.schedulers.single_node.single_node:main"
phenix-scorch-component-art = "phenix_apps.apps.scorch.art.art:main"
phenix-scorch-component-caldera = "phenix_apps.apps.scorch.caldera.caldera:main"
phenix-scorch-component-cc = "phenix_apps.apps.scorch.cc.cc:main"
phenix-scorch-component-collector = "phenix_apps.apps.scorch.collector.collector:main"
phenix-scorch-component-ettercap = "phenix_apps.apps.scorch.ettercap.ettercap:main"
phenix-scorch-component-hoststats = "phenix_apps.apps.scorch.hoststats.hoststats:main"
phenix-scorch-component-iperf = "phenix_apps.apps.scorch.iperf.iperf:main"
phenix-scorch-component-mm = "phenix_apps.apps.scorch.mm.mm:main"
phenix-scorch-component-pcap = "phenix_apps.apps.scorch.pcap.pcap:main"
phenix-scorch-component-qos = "phenix_apps.apps.scorch.qos.qos:main"
phenix-scorch-component-rtds = "phenix_apps.apps.scorch.rtds.rtds:main"
phenix-scorch-component-disruption = "phenix_apps.apps.scorch.disruption.disruption:main"
phenix-scorch-component-snort = "phenix_apps.apps.scorch.snort.snort:main"
phenix-scorch-component-tcpdump = "phenix_apps.apps.scorch.tcpdump.tcpdump:main"
phenix-scorch-component-trafficgen = "phenix_apps.apps.scorch.trafficgen.trafficgen:main"
phenix-scorch-component-vmstats = "phenix_apps.apps.scorch.vmstats.vmstats:main"
phenix-scorch-component-opcexport = "phenix_apps.apps.scorch.opcexport.opcexport:main"
phenix-scorch-component-kafka = "phenix_apps.apps.scorch.kafka.kafka_component:main"

[project.urls]
# Use PyPI-standard names here: https://docs.pypi.org/project_metadata/
"Homepage" = "https://github.com/sandialabs/sceptre-phenix-apps/"
"Documentation" = "https://phenix.sceptre.dev/latest/apps/"
"Issue Tracker" = "https://github.com/sandialabs/sceptre-phenix-apps/issues"
"Source" = "https://github.com/sandialabs/sceptre-phenix-apps"

# Linting/code quality tools
# To install: pip install -e .[dev]
[project.optional-dependencies]
dev = [
    "codespell>=2.2.4",  # spelling
    "ruff",  # powerful linter
    "vulture",  # checks for unused code
    "isort",  # sorts import statements
    "black",  # code style formatting
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
phenix_apps = [
    "apps/*/templates/*.mako",
    "apps/scorch/*/templates/*.mako"
]

# dynamically read version from phenix_apps.__version__
[tool.setuptools.dynamic]
version = {attr = "phenix_apps.__version__"}
